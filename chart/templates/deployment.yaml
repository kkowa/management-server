{{- with .Values.app.components.server }}
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ $.Release.Namespace | quote }}
  name: {{ include "app.components.server.fullname" $ }}
  labels:
    {{- include "app.components.server.labels" $ | nindent 4 }}

  {{- with $.Values.common.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .replicas }}
  selector:
    matchLabels:
      {{- include "app.components.server.selectorLabels" $ | nindent 6 }}
  template:
    metadata:
      {{- with .annotations }}
      annotations:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "app.components.server.labels" $ | nindent 8 }}
    spec:
      serviceAccountName: {{ include "common.serviceAccount.name" $ }}
      automountServiceAccountToken: {{ default false .automountServiceAccountToken }}
      {{- with (default $.Values.global.imagePullSecrets $.Values.imagePullSecrets) }}
      imagePullSecrets:
        {{- range . }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      {{- with .securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: server
          image: {{ include "app.image" $ }}
          imagePullPolicy: {{ $.Values.app.image.pullPolicy }}
          {{- with .container.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: secret
              mountPath: /etc/app
              readOnly: true
            - name: staticfiles
              mountPath: /var/app/staticfiles
            - name: media
              mountPath: /var/app/media
          envFrom:
            - configMapRef:
                name: {{ include "common.fullname" $ }}
          env:
            {{- $mountKeys := list "DJANGO_SECRET_KEY" "DATABASE_URL" "CACHE_URL" "MESSAGE_BROKER_URL" "MAILGUN_API_KEY" -}}
            {{- range $mountKeys }}
            - name: "{{ . }}_FILE"
              value: "/etc/app/{{ . }}"
            {{- end }}
          ports:
            - name: http
              protocol: TCP
              containerPort: 8000
          livenessProbe:
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 3
            failureThreshold: 3
            tcpSocket:
              port: http
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            httpGet:
              port: http
              path: /ht/
          {{- with .container.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: secret
          secret:
            secretName: {{ include "common.fullname" $ }}
        - name: staticfiles
          emptyDir: {}
        - name: media  # TODO: To persistent volume soon, and support storage buckets in future
          emptyDir: {}
      {{- with .nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
---
{{- with .Values.app.components.worker }}
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ $.Release.Namespace | quote }}
  name: {{ include "app.components.worker.fullname" $ }}
  labels:
    {{- include "app.components.worker.labels" $ | nindent 4 }}

  annotations:
    checkov.io/skip1: CKV_K8S_9=Worker does not expose services
    {{- with $.Values.common.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .replicas }}
  selector:
    matchLabels:
      {{- include "app.components.worker.selectorLabels" $ | nindent 6 }}
  template:
    metadata:
      {{- with .annotations }}
      annotations:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "app.components.worker.labels" $ | nindent 8 }}
    spec:
      serviceAccountName: {{ include "common.serviceAccount.name" $ }}
      automountServiceAccountToken: {{ default false .automountServiceAccountToken }}
      {{- with (default $.Values.global.imagePullSecrets $.Values.imagePullSecrets) }}
      imagePullSecrets:
        {{- range . }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      {{- with .securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: worker
          image: {{ include "app.image" $ }}
          imagePullPolicy: {{ $.Values.app.image.pullPolicy }}
          {{- with .container.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: secret
              mountPath: /etc/app
              readOnly: true
            - name: tmpfs
              mountPath: /tmp
          envFrom:
            - configMapRef:
                name: {{ include "common.fullname" $ }}
          env:
            {{- $mountKeys := list "DJANGO_SECRET_KEY" "DATABASE_URL" "CACHE_URL" "MESSAGE_BROKER_URL" "MAILGUN_API_KEY" -}}
            {{- range $mountKeys }}
            - name: "{{ . }}_FILE"
              value: "/etc/app/{{ . }}"
            {{- end }}
          command: ["start-celery-worker.sh"]
          livenessProbe:
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
            exec:
              command: ["/bin/sh", "-c", "poetry run celery inspect ping --destination celery@$${HOSTNAME}"]
          {{- with .container.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: secret
          secret:
            secretName: {{ include "common.fullname" $ }}
        - name: tmpfs
          emptyDir: {}
      {{- with .nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
---
{{- with .Values.app.components.periodicScheduler }}
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ $.Release.Namespace | quote }}
  name: {{ include "app.components.periodicScheduler.fullname" $ }}
  labels:
    {{- include "app.components.periodicScheduler.labels" $ | nindent 4 }}

  annotations:
    checkov.io/skip1: CKV_K8S_9=Scheduler does not expose services
    {{- with $.Values.common.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "app.components.periodicScheduler.selectorLabels" $ | nindent 6 }}
  template:
    metadata:
      {{- with .annotations }}
      annotations:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "app.components.periodicScheduler.labels" $ | nindent 8 }}
    spec:
      serviceAccountName: {{ include "common.serviceAccount.name" $ }}
      automountServiceAccountToken: {{ default false .automountServiceAccountToken }}
      {{- with (default $.Values.global.imagePullSecrets $.Values.imagePullSecrets) }}
      imagePullSecrets:
        {{- range . }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      {{- with .securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: periodic-scheduler
          image: {{ include "app.image" $ }}
          imagePullPolicy: {{ $.Values.app.image.pullPolicy }}
          {{- with .container.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: secret
              mountPath: /etc/app
              readOnly: true
            - name: tmpfs
              mountPath: /tmp
          envFrom:
            - configMapRef:
                name: {{ include "common.fullname" $ }}
          env:
            {{- $mountKeys := list "DJANGO_SECRET_KEY" "DATABASE_URL" "CACHE_URL" "MESSAGE_BROKER_URL" "MAILGUN_API_KEY" -}}
            {{- range $mountKeys }}
            - name: "{{ . }}_FILE"
              value: "/etc/app/{{ . }}"
            {{- end }}
          command: ["start-celery-beat.sh"]
          livenessProbe:
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
            exec:
              command: ["/bin/sh", "-c", "poetry run celery -A config.celery_app status --timeout 3 | grep 'celery@.*: OK'"]

          # TODO: Readiness probe

          {{- with .container.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: secret
          secret:
            secretName: {{ include "common.fullname" $ }}
        - name: tmpfs
          emptyDir: {}
      {{- with .nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
